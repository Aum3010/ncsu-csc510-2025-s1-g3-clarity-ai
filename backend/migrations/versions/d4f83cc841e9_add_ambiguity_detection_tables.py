"""Add ambiguity detection tables

Revision ID: d4f83cc841e9
Revises: g2h3i4j5k6l7
Create Date: 2025-10-28 01:42:56.349760

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime


# revision identifiers, used by Alembic.
revision = 'd4f83cc841e9'
down_revision = 'g2h3i4j5k6l7'
branch_labels = None
depends_on = None


# Default ambiguity lexicon terms
DEFAULT_LEXICON_TERMS = [
    # Performance-related terms
    ('fast', 'global', 'performance'),
    ('slow', 'global', 'performance'),
    ('quick', 'global', 'performance'),
    ('quickly', 'global', 'performance'),
    ('efficient', 'global', 'performance'),
    ('efficiently', 'global', 'performance'),
    ('performant', 'global', 'performance'),
    ('responsive', 'global', 'performance'),
    ('high-performance', 'global', 'performance'),
    ('low-latency', 'global', 'performance'),
    ('scalable', 'global', 'performance'),
    
    # Security-related terms
    ('secure', 'global', 'security'),
    ('securely', 'global', 'security'),
    ('safe', 'global', 'security'),
    ('safely', 'global', 'security'),
    ('protected', 'global', 'security'),
    ('encrypted', 'global', 'security'),
    
    # Usability-related terms
    ('user-friendly', 'global', 'usability'),
    ('easy', 'global', 'usability'),
    ('easily', 'global', 'usability'),
    ('simple', 'global', 'usability'),
    ('simply', 'global', 'usability'),
    ('intuitive', 'global', 'usability'),
    ('intuitively', 'global', 'usability'),
    ('straightforward', 'global', 'usability'),
    ('convenient', 'global', 'usability'),
    ('seamless', 'global', 'usability'),
    ('seamlessly', 'global', 'usability'),
    
    # Quality-related terms
    ('robust', 'global', 'quality'),
    ('reliable', 'global', 'quality'),
    ('reliably', 'global', 'quality'),
    ('stable', 'global', 'quality'),
    ('high-quality', 'global', 'quality'),
    ('accurate', 'global', 'quality'),
    ('accurately', 'global', 'quality'),
    ('precise', 'global', 'quality'),
    ('precisely', 'global', 'quality'),
    ('effective', 'global', 'quality'),
    ('effectively', 'global', 'quality'),
    
    # Size/Scale-related terms
    ('large', 'global', 'scale'),
    ('small', 'global', 'scale'),
    ('big', 'global', 'scale'),
    ('huge', 'global', 'scale'),
    ('tiny', 'global', 'scale'),
    ('massive', 'global', 'scale'),
    
    # Frequency-related terms
    ('often', 'global', 'frequency'),
    ('rarely', 'global', 'frequency'),
    ('frequently', 'global', 'frequency'),
    ('occasionally', 'global', 'frequency'),
    ('sometimes', 'global', 'frequency'),
    
    # Degree/Extent terms
    ('very', 'global', 'degree'),
    ('highly', 'global', 'degree'),
    ('extremely', 'global', 'degree'),
    ('significantly', 'global', 'degree'),
    ('substantially', 'global', 'degree'),
    ('moderately', 'global', 'degree'),
    ('slightly', 'global', 'degree'),
    ('somewhat', 'global', 'degree'),
    
    # Flexibility-related terms
    ('flexible', 'global', 'flexibility'),
    ('adaptable', 'global', 'flexibility'),
    ('configurable', 'global', 'flexibility'),
    ('customizable', 'global', 'flexibility'),
    
    # Maintenance-related terms
    ('maintainable', 'global', 'maintenance'),
    ('extensible', 'global', 'maintenance'),
    ('modular', 'global', 'maintenance'),
    
    # General vague terms
    ('adequate', 'global', 'general'),
    ('appropriate', 'global', 'general'),
    ('reasonable', 'global', 'general'),
    ('sufficient', 'global', 'general'),
    ('acceptable', 'global', 'general'),
    ('optimal', 'global', 'general'),
    ('better', 'global', 'general'),
    ('improved', 'global', 'general'),
    ('enhanced', 'global', 'general'),
    ('good', 'global', 'general'),
    ('bad', 'global', 'general'),
    ('nice', 'global', 'general'),
    ('clean', 'global', 'general'),
    ('elegant', 'global', 'general'),
]


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ambiguity_lexicon',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('term', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('owner_id', sa.String(length=255), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('term', 'type', 'owner_id', name='uq_term_type_owner')
    )
    with op.batch_alter_table('ambiguity_lexicon', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ambiguity_lexicon_owner_id'), ['owner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ambiguity_lexicon_type'), ['type'], unique=False)

    op.create_table('ambiguity_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('requirement_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.String(length=255), nullable=True),
    sa.Column('original_text', sa.Text(), nullable=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=True),
    sa.Column('total_terms_flagged', sa.Integer(), nullable=True),
    sa.Column('terms_resolved', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['requirement_id'], ['requirements.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ambiguity_analyses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ambiguity_analyses_owner_id'), ['owner_id'], unique=False)

    op.create_table('ambiguous_terms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analysis_id', sa.Integer(), nullable=True),
    sa.Column('term', sa.String(length=255), nullable=False),
    sa.Column('position_start', sa.Integer(), nullable=False),
    sa.Column('position_end', sa.Integer(), nullable=False),
    sa.Column('sentence_context', sa.Text(), nullable=True),
    sa.Column('is_ambiguous', sa.Boolean(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('clarification_prompt', sa.Text(), nullable=True),
    sa.Column('suggested_replacements', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['ambiguity_analyses.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ambiguous_terms', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ambiguous_terms_analysis_id'), ['analysis_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_ambiguous_terms_status'), ['status'], unique=False)

    op.create_table('clarification_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('term_id', sa.Integer(), nullable=True),
    sa.Column('requirement_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.String(length=255), nullable=True),
    sa.Column('original_text', sa.Text(), nullable=False),
    sa.Column('clarified_text', sa.Text(), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('clarified_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['requirement_id'], ['requirements.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['term_id'], ['ambiguous_terms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('clarification_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_clarification_history_owner_id'), ['owner_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_clarification_history_requirement_id'), ['requirement_id'], unique=False)

    # Seed default ambiguity lexicon
    ambiguity_lexicon_table = sa.table('ambiguity_lexicon',
        sa.column('term', sa.String),
        sa.column('type', sa.String),
        sa.column('owner_id', sa.String),
        sa.column('category', sa.String),
        sa.column('added_at', sa.DateTime)
    )
    
    seed_data = [
        {
            'term': term,
            'type': term_type,
            'owner_id': None,
            'category': category,
            'added_at': datetime.utcnow()
        }
        for term, term_type, category in DEFAULT_LEXICON_TERMS
    ]
    
    op.bulk_insert(ambiguity_lexicon_table, seed_data)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('clarification_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_clarification_history_requirement_id'))
        batch_op.drop_index(batch_op.f('ix_clarification_history_owner_id'))

    op.drop_table('clarification_history')
    with op.batch_alter_table('ambiguous_terms', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ambiguous_terms_status'))
        batch_op.drop_index(batch_op.f('ix_ambiguous_terms_analysis_id'))

    op.drop_table('ambiguous_terms')
    with op.batch_alter_table('ambiguity_analyses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ambiguity_analyses_owner_id'))

    op.drop_table('ambiguity_analyses')
    with op.batch_alter_table('ambiguity_lexicon', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ambiguity_lexicon_type'))
        batch_op.drop_index(batch_op.f('ix_ambiguity_lexicon_owner_id'))

    op.drop_table('ambiguity_lexicon')
    # ### end Alembic commands ###
